// This file holds an import as plugin from a main file

////// plugin1/live.plugin.json

{
    "name" : "plugin1",
    "package": ".",
    "modules": ["A", "B"]
}

////// plugin1/live.package.json

{
    "name" : "plugin1",
    "version" : "1.0.0"
}

////// plugin1/A.lv

component default < Element{
    function toString : (){
        return "class[A]"
    }
}

////// plugin1/A.lv.js

class A extends Element{
    toString(){
        return "class[A]"
    }
}
module.exports["A"] = A


////// plugin1/B.lv

component default < Element{
    function toString : (){
        return "class[B]"
    }
}

////// plugin1/B.lv.js

class B extends Element{
    toString(){
        return "class[B]"
    }
}
module.exports["B"] = B

////// main.lv

import .plugin1 as plug

component default < Element{
    string a : {
        return (new plug.A()).toString()
    }
    string b : {
        return (new plug.B()).toString()
    }
}

////// main.lv.js

var plug = imports.requireAs(".plugin1")

module.exports["main"] = class extends Element{
    constructor(){
        super()
        var a = new (plug.get('A'))();
        var b = new (plug.get('B'))();
        Element.addProperty(this, "a", {
            type: "string",
            value: a.toString(),
            notify: "aChanged"
        })
        Element.addProperty(this, "b", {
            type: "string",
            value: b.toString(),
            notify: "bChanged"
        })
    }
}
